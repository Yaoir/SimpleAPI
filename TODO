Testing
	Implement a test script for regression testing, using the command-line interface.
	This will check the internal operation of the server, including data file I/O.

Optional
--------

Supporting longer sequences
	1) Use math/big for arbitrary precision integers.
	   + Limited by memory and CPU usage
	   - Requires more memory and CPU usage. At some point, won't meet
	     the spec, requiring an arbitrary limit.
	2) Limited precision
	   Create a user-defined type that is a slice of bytes that when concatenated,
	   make an integer that is larger than a 64-bit int.
	   example:
	   type [32]byte int256	// a 256-bit integer
	   + Allows much larger numbers in the sequence, and may be good enough for almost all users.
	   - More time to implement, and the extra code is outside of the Go standard library.
	     For example, a custom binary-to-alpha function to replace strconv.ItoA().
	   - Moderate loss of API server throughput.

Performance Optimization
	For the _current_ operation, there is no need to write to the data file.
	Just read the file, and return the current number in the sequence, and close the file.
	Note: This affects the throughput testing, requiring the test to mix requests
		to the endpoints, and not use only _current_.

Limit log messages
	Do not repeat messages more than N times.

Unit testing can be added.

Move towards full REST/RESTful API
	Differentiate request types: The 3-endpoint API should respond to GET requests only,
	reserving PUT, POST, and DELETE for other uses.
